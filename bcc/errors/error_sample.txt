 1: #!/usr/bin/python3
 2: # -*- coding: utf-8 -*-
 3: 
 4: from bcc import BPF
 5: from bcc.utils import printb
 6: 
 7: # eBPFのプログラムを文字列として定義
 8: bpf_text = """
 9: // 現在存在するライセンスは以下のURLに存在
10: // https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/linux/license.h
11: // GPL非互換なライセンス
12: //#define BPF_LICENSE Proprietary
13: //
14: // GPLに互換のライセンス
15: //#define BPF_LICENSE GPL
16: //#define BPF_LICENSE GPL v2
17: //#define BPF_LICENSE GPL and additional rights
18: //#define BPF_LICENSE Dual BSD/GPL
19: //#define BPF_LICENSE Dual MIT/GPL
20: //#define BPF_LICENSE Dual MPL/GPL
21: 
22: 
23: int syscall__execve(struct pt_regs *ctx)
24: {
25: 	bpf_trace_printk("start of execve\\n");
26: 	return 0;
27: };
28: """
29: 
30: # 定義したソースをeBPFのVMにロード
31: b = BPF(text=bpf_text)
32: 
33: # eBPFのVMをkprobeのexecveに割当て
34: execve_fnname = b.get_syscall_fnname("execve")
35: b.attach_kprobe(event=execve_fnname, fn_name="syscall__execve")
36: 
37: # ヘッダの出力
38: print("%-6s %-12s %s" % ("PID", "COMM", "OUTPUT"))
39: 
40: # eBPFのプログラムの出力を無限ループで回って受信して出力
41: while 1:
42:         # Read messages from kernel pipe
43:         try:
44:             (task, pid, cpu, flags, ts, msg) = b.trace_fields()
45:         except ValueError:
46:             # Ignore messages from other tracers
47:             continue
48:         except KeyboardInterrupt:
49:             # Ctrl-Cの入力でループから脱出
50:             exit()
51: 
52:         printb(b"%-6d %-12.12s %s" % (pid, task, msg))
