  1: #!/usr/bin/python3
  2: # -*- coding: utf-8 -*-
  3: 
  4: from bcc import BPF
  5: from bcc.utils import printb
  6: import time
  7: 
  8: # eBPFのソースを文字列として定義
  9: bpf_text = """
 10: #include <linux/sched.h>
 11: // 監視対象のシステムコールを実行したプロセス名を格納するための変数型
 12: struct key_t {
 13:     char comm[TASK_COMM_LEN];
 14: };
 15: 
 16: BPF_HASH(uidcnt,struct key_t);  // 表の定義
 17: 
 18: int syscall__execve(struct pt_regs *ctx)
 19: {
 20:     struct key_t key = {};
 21:     // execveを呼び出したプロセス名を取得
 22:     bpf_get_current_comm(&key.comm, sizeof(key.comm));
 23:     u64 zero=0;
 24:     long long *value;
 25:     // execveを呼び出したプロセス名をキーとして表のエントリを取得
 26:     // もし，エントリが存在しない場合は変数zeroの値(ここでは0)で新規作成
 27:     value = uidcnt.lookup_or_try_init(&key, &zero);
 28:     if (value) {
 29:         // エントリが存在した(もしくは新規に作成できた)場合
 30:         (*value)++;
 31:         if ((*value) > 10 ) {
 32:             // 該当キーの表のエントリを削除
 33:             uidcnt.delete(&key);
 34:         }
 35:     }
 36: 
 37:     return 0;
 38: };
 39: """
 40: 
 41: # eBPFのブログラムをロード
 42: b = BPF(text=bpf_text)
 43: # eBPFのプログラムをexecveのkprobeに割当て
 44: execve_fnname = b.get_syscall_fnname("execve")
 45: b.attach_kprobe(event=execve_fnname, fn_name="syscall__execve")
 46: 
 47: # 表の定義
 48: uidcnt = b.get_table("uidcnt")
 49: 
 50: 
 51: # eBPFの出力を受信して表示するループ
 52: while 1:
 53:     print("--- counter : program name-----");
 54:     try:
 55:         for k, v in sorted(uidcnt.items(), key=lambda uidcnt: uidcnt[1].value):
 56:             printb(b"%10d \"%s\"" % (v.value, k.comm))
 57:         print("---next round-----");
 58:         time.sleep(10)
 59:     except KeyboardInterrupt:
 60:         # Ctrl-Cでループを抜ける
 61:         exit()
 62: 
 63: 
