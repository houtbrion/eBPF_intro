  1: #!/usr/bin/python3
  2: # -*- coding: utf-8 -*-
  3: 
  4: from bcc import BPF
  5: from bcc.utils import printb
  6: from ctypes import c_uint, c_int, c_ulonglong, Structure
  7: 
  8: # eBPFのソースを文字列として定義
  9: bpf_text = """
 10: BPF_PROG_ARRAY(ftable, 2); // tail callのプログラムエントリ登録表の作成
 11: 
 12: // 監視対象のイベント発生時は呼ばれない関数
 13: int foo(struct pt_regs *ctx)
 14: {
 15: 	bpf_trace_printk("I'm foo\\n");
 16: 	return 0;
 17: };
 18: 
 19: // 監視対象のイベント発生時に呼び出される関数
 20: int bar(struct pt_regs *ctx)
 21: {
 22: 	bpf_trace_printk("I'm bar\\n");
 23:         ftable.call(ctx, 1); // 表の1番目のエントリに登録されている関数を呼び出し
 24: 	return 0;
 25: };
 26: """
 27: 
 28: # eBPFのブログラムをロード
 29: b = BPF(text=bpf_text)
 30: 
 31: # 表を定義してアクセスするための変数に代入
 32: ftable = b.get_table("ftable")
 33: 
 34: # eBPFの関数fooをkprobe用としてロード
 35: foo = b.load_func("foo", BPF.KPROBE)
 36: 
 37: # 関数barをexecveを監視するためのプログラムとして割り当て
 38: execve_fnname = b.get_syscall_fnname("execve")
 39: b.attach_kprobe(event=execve_fnname, fn_name="bar")
 40: 
 41: # 関数fooを表の1番目のエントリとして登録
 42: ftable[c_int(1)] = c_int(foo.fd)
 43: 
 44: # ヘッダの出力
 45: print("%-6s %-12s %s" % ("PID", "COMM", "OUTPUT"))
 46: 
 47: # eBPFの出力を取得してコンソール出力するループ
 48: while 1:
 49:         # Read messages from kernel pipe
 50:         try:
 51:             (task, pid, cpu, flags, ts, msg) = b.trace_fields()
 52:         except ValueError:
 53:             # Ignore messages from other tracers
 54:             continue
 55:         except KeyboardInterrupt:
 56:             # Ctrl-Cでループを抜ける
 57:             exit()
 58: 
 59:         printb(b"%-6d %-12.12s %s" % (pid, task, msg))
 60: 
 61: 
