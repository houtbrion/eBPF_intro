#!/usr/bin/python3
#
# xdp_redirect_cpu.py Redirect the incoming packet to the specific CPU
#
# Copyright (c) 2018 Gary Lin
# Licensed under the Apache License, Version 2.0 (the "License")

from bcc import BPF
import time
import sys
from multiprocessing import cpu_count
import ctypes as ct
from bcc.utils import printb

flags = 0
def usage():
    print("Usage: {0} <in ifdev> <CPU id>".format(sys.argv[0]))
    print("e.g.: {0} eth0 2\n".format(sys.argv[0]))
    exit(1)

if len(sys.argv) != 3:
    usage()

in_if = sys.argv[1]
cpu_id = int(sys.argv[2])

max_cpu = cpu_count()
if (cpu_id > max_cpu):
    print("Invalid CPU id")
    exit(1)

# load BPF program
b = BPF(text = """
#define KBUILD_MODNAME "foo"
#include <uapi/linux/bpf.h>
#include <linux/in.h>
#include <linux/if_ether.h>
#include <linux/ip.h>
#define ICMP 1

BPF_CPUMAP(cpumap, __MAX_CPU__);
//BPF_ARRAY(dest, uint32_t, 1);
//BPF_PERCPU_ARRAY(rxcnt, long, 1);

static inline void swap_src_dst_mac(void *data)
{
    unsigned short *p = data;
    unsigned short dst[3];

    dst[0] = p[0];
    dst[1] = p[1];
    dst[2] = p[2];
    p[0] = p[3];
    p[1] = p[4];
    p[2] = p[5];
    p[3] = dst[0];
    p[4] = dst[1];
    p[5] = dst[2];
}

int xdp_redirect_cpu(struct xdp_md *ctx) {
    void* data_end = (void*)(long)ctx->data_end;
    void* data = (void*)(long)ctx->data;
    struct ethhdr *eth = data;
    uint32_t key = 0;
    //long *value;
    uint32_t *cpu;
    uint64_t nh_off;

    nh_off = sizeof(*eth);
    if (data + nh_off  > data_end)
        return XDP_DROP;

    if (eth->h_proto == htons(ETH_P_IP)) {
        //bpf_trace_printk("bar packet\\n");
        struct iphdr *iph = data + nh_off;
        if ((void*)&iph[1] > data_end)
            return XDP_DROP;

        if (iph->protocol == ICMP) {
            bpf_trace_printk("bar packet\\n");
            //u64 zero=0;
            //value = rxcnt.lookup_or_try_init(&key, &zero);
            //if (value)
            //    *value += 1;
            swap_src_dst_mac(data);
            return cpumap.redirect_map(*cpu, 0);
        }
    }

    //cpu = dest.lookup(&key);
    //if (!cpu)
    //    return XDP_PASS;

    return XDP_PASS;
}

int xdp_dummy(struct xdp_md *ctx) {
    return XDP_PASS;
}
""", cflags=["-w", "-D__MAX_CPU__=%u" % max_cpu], debug=0)

#dest = b.get_table("dest")
#dest[0] = ct.c_uint32(cpu_id)

cpumap = b.get_table("cpumap")
cpumap[cpu_id] = ct.c_uint32(192)

in_fn = b.load_func("xdp_redirect_cpu", BPF.XDP)
b.attach_xdp(in_if, in_fn, flags)

# header
print("%-6s %-12s %s" % ("PID", "COMM", "OUTPUT"))

# filter and format output
while 1:
        # Read messages from kernel pipe
        try:
            (task, pid, cpu, flags, ts, msg) = b.trace_fields()
        except ValueError:
            # Ignore messages from other tracers
            continue
        except KeyboardInterrupt:
            print("Removing filter from device")
            break

        printb(b"%-6d %-12.12s %s" % (pid, task, msg))

b.remove_xdp(in_if, flags)
