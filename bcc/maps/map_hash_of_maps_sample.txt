  1: #!/usr/bin/python3
  2: # -*- coding: utf-8 -*-
  3: 
  4: from bcc import BPF
  5: import time
  6: import ctypes as ct
  7: 
  8: # eBPFのソースを文字列として定義
  9: bpf_text = """
 10: #include <linux/sched.h>
 11: 
 12: // 監視対象がbashとbshなのでそれの文字列と文字列長を定義
 13: #define BASH "bash"
 14: #define BASHLEN 4
 15: #define SHELL "sh"
 16: #define SHELLLEN 2
 17: 
 18: // 監視対象のシステムコールを実行したプロセス名を格納するための変数型
 19: struct key_t {
 20:     char comm[TASK_COMM_LEN];
 21: };
 22: 
 23: // 表の定義
 24: BPF_ARRAY(bashcnt, long, 2);               // bash用の内部表
 25: BPF_ARRAY(shcnt, long, 2);                 // shell用の内部表
 26: BPF_HASH_OF_MAPS(map_array, "bashcnt", 2); // 上記の2つの表を束ねる外部表
 27: 
 28: // 文字列が"bash"と一致するか否かを判定する関数
 29: static inline bool compare_with_bash(char *str) {
 30:     char target[BASHLEN];
 31:     // 引数をローカル変数にコピー
 32:     bpf_probe_read(&target, sizeof(target), str);
 33:     char bash[]="bash";
 34:     // eBPFは文字列系の関数はないので面倒な手順が必要
 35:     for (int i=0; i< BASHLEN; i++){
 36:         if (target[i] != bash[i]) return false;
 37:     };
 38:     return true;
 39: };
 40: 
 41: // 文字列が"sh"と一致するか否かを判定する関数
 42: static inline bool compare_with_shell(char *str) {
 43:     char target[SHELLLEN];
 44:     // 引数をローカル変数にコピー
 45:     bpf_probe_read(&target, sizeof(target), str);
 46:     char shell[]="sh";
 47:     // eBPFは文字列系の関数はないので面倒な手順が必要
 48:     for (int i=0; i< SHELLLEN; i++){
 49:         if (target[i] != shell[i]) return false;
 50:     };
 51:     return true;
 52: };
 53: 
 54: // execveが実行された場合に走るプログラム(関数)
 55: int syscall__execve(struct pt_regs *ctx)
 56: {
 57:     struct key_t key = {};
 58:     // execveを呼び出したプロセス名を取得
 59:     bpf_get_current_comm(&key.comm, sizeof(key.comm));
 60: 
 61:     int  idx;
 62:     // execveを呼び出したプロセスがbashかshellか，それ以外かを判定
 63:     if (compare_with_bash(key.comm)) {
 64:         idx = 0;
 65:     } else {
 66:         if (compare_with_shell(key.comm)) {
 67:             idx = 1;
 68:         } else {
 69:             return 0;  // bashでもshellでもない場合は終了
 70:         }
 71:     }
 72: 
 73:     // execveを実行したプロセスのuidを取得
 74:     u64 ugid = bpf_get_current_uid_gid();
 75:     u32 uid = ugid;
 76: 
 77:     // rootかそれ以外かに分別
 78:     if (uid != 0) {
 79:         uid = 1;
 80:     }
 81: 
 82:     void * inner_map;
 83:     // 外部表から内部表を取り出し
 84:     inner_map = map_array.lookup(&idx);
 85:     if (!inner_map) return 0;
 86: 
 87:     int *val;
 88:     long value;
 89:     // 内部表のuidに対応する要素を取得
 90:     val = bpf_map_lookup_elem(inner_map, &uid);
 91:     if (val) {  // 取得した要素を更新
 92:         value = *val + 1;
 93:         // 更新処理本体． 末尾の引数は該当要素がなかった場合にどうするかなどを
 94:         // 指定するフラグ(README.mdを参照)
 95:         bpf_map_update_elem(inner_map, &uid, &value, BPF_ANY);
 96:     }
 97: 
 98:     return 0;
 99: };
100: """
101: 
102: # eBPFのブログラムをロード
103: b = BPF(text=bpf_text)
104: 
105: # 表の定義
106: bash_cnt = b.get_table("bashcnt")   # bash用の内部表
107: sh_cnt = b.get_table("shcnt")       # shell用の内部表
108: uid_cnt = b.get_table("map_array")  # 外部表の定義
109: 
110: #内部表を外側の表の要素として登録
111: uid_cnt[ct.c_int(0)] = ct.c_int(bash_cnt.get_fd())
112: uid_cnt[ct.c_int(1)] = ct.c_int(sh_cnt.get_fd())
113: 
114: # eBPFのプログラムをexecveのkprobeに割当て
115: execve_fnname = b.get_syscall_fnname("execve")
116: b.attach_kprobe(event=execve_fnname, fn_name="syscall__execve")
117: 
118: # filter and format output
119: while 1:
120:     print("=================測定結果===================")
121:     try:
122:         print("bashの結果:")
123:         for k in bash_cnt.keys():    # 表のキーでループ
124:             val = bash_cnt[k].value  # 表のキーに対応する要素を取得
125:             i = k.value              # キーを値に変換
126:             if i == 0 :
127:                 print("rootユーザ: {} 回execve呼び出し".format(val))
128:             else:
129:                 print("一般ユーザ: {} 回execve呼び出し".format(val))
130:         bash_cnt.clear()
131:         print("")
132:         print("shellの結果:")
133:         for k in sh_cnt.keys():      # 表のキーでループ
134:             val = sh_cnt[k].value    # 表のキーに対応する要素を取得
135:             i = k.value              # キーを値に変換
136:             if i == 0 :
137:                 print("rootユーザ: {} 回execve呼び出し".format(val))
138:             else:
139:                 print("一般ユーザ: {} 回execve呼び出し".format(val))
140:         sh_cnt.clear()
141:         print("")
142:         print("")
143:         time.sleep(10)
144:     except KeyboardInterrupt:
145:         # Ctrl-Cでループから脱出
146:         exit()
147: 
148: 
