#!/usr/bin/python3
# -*- coding: utf-8 -*-
# https://github.com/iovisor/bcc/blob/master/examples/networking/xdp/xdp_drop_count.py
# https://qiita.com/sg-matsumoto/items/8194320db32d4d8f7a16

from __future__ import print_function
from bcc import BPF
import sys
import time
#from bcc.utils import printb

# define BPF program
bpf_text = """
#include <uapi/linux/bpf.h>
#include <linux/ip.h>
#define ICMP 1
BPF_HASH(pktcnt, u32, u32);
BPF_DEVMAP(ifmap, 1);

int xdp_count_icmp(struct xdp_md *ctx){
    void* data_end = (void*)(long)ctx->data_end;
    void* data = (void*)(long)ctx->data;
    struct ethhdr *eth = data;
    u32 value = 0, *vp;
    u32 protocol;
    u64 nh_off = sizeof(*eth);

    if (data + nh_off > data_end)
        return XDP_PASS;

    if (eth->h_proto == htons(ETH_P_IP)) {
        struct iphdr *iph = data + nh_off;
        if ((void*)&iph[1] > data_end)
            return XDP_PASS;

        protocol = iph->protocol;
        if (protocol == ICMP) {
            vp = pktcnt.lookup_or_init(&protocol, &value);
            *vp += 1;
            return XDP_PASS;
        }
    }
    return XDP_PASS;
}
"""

b = BPF(text = bpf_text)
fn = b.load_func("xdp_count_icmp", BPF.XDP)

#device = sys.argv[1]
#device = "enp0s3"
device = "lo"

b.attach_xdp(device, fn)
#pktcnt = b.get_table("pktcnt")
pktcnt = b["pktcnt"]
ifmap = b["ifmap"]

#for k, v in ifmap.items():
#    print("table number = {} i/f number =  {}".format(k.value, v.value))
while True:
    try:
        pktcnt.clear()
        time.sleep(1)
        for k, v in pktcnt.items():
            print("{} {}: {} pkt/s".format(time.strftime("%H:%M:%S"), k.value, v.value))
    except KeyboardInterrupt:
        break

b.remove_xdp(device)




