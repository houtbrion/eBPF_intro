 1: #!/usr/bin/python3
 2: # -*- coding: utf-8 -*-
 3: 
 4: from bcc import BPF
 5: from bcc.utils import printb
 6: 
 7: # eBPFのVMにロードさせるプログラムのCコードを文字列として定義
 8: bpf_text = """
 9: #include <linux/sched.h>
10: 
11: // 取得したデータを一時的に可能するための構造体定義
12: struct data_t {
13:     u32 pid;
14:     char comm[TASK_COMM_LEN];
15:     u64 time;
16: };
17: 
18: int syscall__execve(struct pt_regs *ctx)
19: {
20:     struct data_t data = {};
21:     // カーネル内部時刻を取得
22:     data.time = bpf_ktime_get_ns();
23: 
24:     // プロセスIDを取得
25:     u64 pgid = bpf_get_current_pid_tgid();
26:     data.pid = pgid;    // 下32bitがpid
27: 
28:     // execveを実行したプロセスの名前を取得
29:     bpf_get_current_comm(&data.comm, sizeof(data.comm));
30: 
31:     // 取得した情報をユーザ空間に通知
32:     bpf_trace_printk("start of execve time = %ld , pid = %u, comm = %s\\n",data.time, data.pid, data.comm);
33:     return 0;
34: };
35: """
36: 
37: # 上で定義した文字列のCコードをeBPFのVMに与える
38: b = BPF(text=bpf_text)
39: 
40: # eBPFのVMのプログラムをkprobeのexecveに割付け
41: execve_fnname = b.get_syscall_fnname("execve")
42: b.attach_kprobe(event=execve_fnname, fn_name="syscall__execve")
43: 
44: # ヘッダの出力
45: print("%-6s %-12s %s" % ("PID", "COMM", "OUTPUT"))
46: 
47: # eBPFのプログラムが出力する内容(bpf_trace_printk())を無限ループで受信して出力
48: while 1:
49:         # Read messages from kernel pipe
50:         try:
51:             (task, pid, cpu, flags, ts, msg) = b.trace_fields()
52:         except ValueError:
53:             # Ignore messages from other tracers
54:             continue
55:         except KeyboardInterrupt:
56:             # Ctrl-Cが入力された場合はループから抜け出す
57:             exit()
58: 
59:         printb(b"%-6d %-12.12s %s" % (pid, task, msg))
