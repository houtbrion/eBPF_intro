#!/usr/bin/python3
# -*- coding: utf-8 -*-

from bcc import BPF
from os import getpid

# eBPFのプログラム
bpf_text = """
#include <uapi/linux/ptrace.h>

// 呼び出し時
int printarg(struct pt_regs *ctx) {
    if (!PT_REGS_PARM1(ctx))
        return 0;
    bpf_trace_printk("arg = %u\\n", PT_REGS_PARM1(ctx));
    return 0;
};

// 実行終了時
int printret(struct pt_regs *ctx) {
    if (!PT_REGS_RC(ctx))
        return 0;
    bpf_trace_printk("return value = %u\\n", PT_REGS_RC(ctx));
    return 0;
};
"""

# プログラムをVMにロード
b = BPF(text=bpf_text)

# VMのプログラムを監視対象に割り付け
b.attach_uprobe(name="./target-sample", sym="func", fn_name="printarg")
b.attach_uretprobe(name="./target-sample", sym="func", fn_name="printret")

# header出力
print("%-18s %-16s %-6s %s" % ("TIME(s)", "COMM", "PID", "MESSAGE"))

# 自分のpidを取得
me = getpid()
# eBPFの出力の受信とそのoutput
while 1:
    try:
        (task, pid, cpu, flags, ts, msg) = b.trace_fields()
    except ValueError:
        continue
    except KeyboardInterrupt:
        # Ctrl-Cでループから脱出
        exit()
    # 受信したeBPF出力の原因が自分だったら無視
    if pid == me or msg == "":
        continue
    print("%-18.9f %-16s %-6d %s" % (ts, task, pid, msg))
