 1: #!/usr/bin/python3
 2: # -*- coding: utf-8 -*-
 3: 
 4: from bcc import BPF
 5: from os import getpid
 6: 
 7: # eBPFのプログラム
 8: bpf_text = """
 9: #include <uapi/linux/ptrace.h>
10: 
11: // 呼び出し時
12: int printarg(struct pt_regs *ctx) {
13:     if (!PT_REGS_PARM1(ctx))
14:         return 0;
15:     bpf_trace_printk("arg = %u\\n", PT_REGS_PARM1(ctx));
16:     return 0;
17: };
18: 
19: // 実行終了時
20: int printret(struct pt_regs *ctx) {
21:     if (!PT_REGS_RC(ctx))
22:         return 0;
23:     bpf_trace_printk("return value = %u\\n", PT_REGS_RC(ctx));
24:     return 0;
25: };
26: """
27: 
28: # プログラムをVMにロード
29: b = BPF(text=bpf_text)
30: 
31: # VMのプログラムを監視対象に割り付け
32: b.attach_uprobe(name="./target-sample", sym="func", fn_name="printarg")
33: b.attach_uretprobe(name="./target-sample", sym="func", fn_name="printret")
34: 
35: # header出力
36: print("%-18s %-16s %-6s %s" % ("TIME(s)", "COMM", "PID", "MESSAGE"))
37: 
38: # 自分のpidを取得
39: me = getpid()
40: # eBPFの出力の受信とそのoutput
41: while 1:
42:     try:
43:         (task, pid, cpu, flags, ts, msg) = b.trace_fields()
44:     except ValueError:
45:         continue
46:     except KeyboardInterrupt:
47:         # Ctrl-Cでループから脱出
48:         exit()
49:     # 受信したeBPF出力の原因が自分だったら無視
50:     if pid == me or msg == "":
51:         continue
52:     print("%-18.9f %-16s %-6d %s" % (ts, task, pid, msg))
