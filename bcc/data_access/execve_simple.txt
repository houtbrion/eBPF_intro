  1: #!/usr/bin/python3
  2: # -*- coding: utf-8 -*-
  3: 
  4: from bcc import BPF
  5: from bcc.utils import printb
  6: import os
  7: 
  8: # カーネルバージョンが5.5以上の時に，eBPFプログラムの
  9: # 先頭に付加する「define文」
 10: header = """
 11: #define NEW_KERNEL
 12: """
 13: # eBPFプログラム本体
 14: bpf_text = """
 15: #include <linux/sched.h>
 16: 
 17: #ifndef NEW_KERNEL
 18: int syscall__execve(struct pt_regs *ctx)
 19: #else
 20: int syscall__execve(struct pt_regs *ctx, const char * filename)
 21: #endif
 22: {
 23:         // 「execve」の実行開始時刻(カーネル内部時計:uptimeのようなもの)を取得
 24:         u64 time = bpf_ktime_get_ns();
 25:         // 「execve」を実行したプロセスのpidとtgidを取得
 26:         u64 pgid = bpf_get_current_pid_tgid();
 27:         u32 pid = pgid;
 28:         u32 tgid = pgid >> 32;
 29:         // 「execve」を実行したプロセスのユーザIDとグループIDを取得
 30:         u64 ugid = bpf_get_current_uid_gid();
 31:         u32 uid = ugid;
 32:         u32 gid = ugid >> 32;
 33:         // 「execve」を実行したプロセスのプログラム名を取得
 34:         char comm[TASK_COMM_LEN];
 35:         bpf_get_current_comm(&comm, sizeof(comm));
 36:         // 「execve」を実行したプロセスのプログラム情報を構造体として取得
 37:         struct task_struct *t = (struct task_struct *)bpf_get_current_task();
 38:         // 32bitの疑似乱数を取得
 39:         u32 rval = bpf_get_prandom_u32();
 40:         // 各種の情報を順次出力
 41:         //  bpf_trace_printk()は引数を最大で3つ，文字列は1つしか取れないため分割して出力
 42:         bpf_trace_printk("start of execve time = %ld , comm = %s\\n",time, comm);
 43:         bpf_trace_printk("start of execve time = %ld, pid = %d , tgid = %d\\n",time, pid, tgid);
 44:         bpf_trace_printk("start of execve time = %ld, uid = %d , gid = %d\\n",time, uid, gid);
 45:         // プロセスの状態を出力
 46:         bpf_trace_printk("state of comm = %d\\n", t->state);
 47:         // 生成した乱数とその乱数のlog2()を出力
 48:         bpf_trace_printk("randval = %u , log2l(randval) = %d\\n", rval, bpf_log2l(rval));
 49: #ifdef NEW_KERNEL
 50:         // kernelバージョンが5.5以降の場合だけ使える機能
 51:         bpf_probe_read_kernel(&tgid, sizeof(tgid), &t->tgid);
 52:         bpf_probe_read_kernel(&pid, sizeof(pid), &t->pid);
 53:         bpf_trace_printk("pid = %d , tgid = %d\\n",pid, tgid);
 54:         // 「execve」を実行したプロセスのプログラム名(文字列)を別の変数にコピー(構造体など一般的な方法)
 55:         char comm2[TASK_COMM_LEN];
 56:         if (0 == bpf_probe_read_user(comm2, sizeof(comm2), (void *) filename)) {
 57:             bpf_trace_printk("comm2 = %s\\n", comm2);
 58:         } else {
 59:             bpf_trace_printk("fail to exec : bpf_probe_read_user()\\n");
 60:         }
 61:         // 「execve」を実行したプロセスのプログラム名(文字列)を別の変数にコピー(文字列専用の方式)
 62:         char comm3[TASK_COMM_LEN];
 63:         int rst = bpf_probe_read_user_str(comm3, sizeof(comm3), (void *) filename);
 64:         if ( rst > 0 ) {
 65:             bpf_trace_printk("comm3 = %s\\n", comm3);
 66:         } else if (rst < 0) {
 67:             bpf_trace_printk("fail to exec : bpf_probe_read_user_str()\\n");
 68:         }
 69: #endif /* NEW_KERNEL */
 70:         return 0;
 71: };
 72: """
 73: 
 74: # OSカーネルのバージョンを取得する関数
 75: def kernelVersion():
 76:     releaseNum = os.uname().release.split('.')
 77:     release = float(releaseNum[0] + '.' + releaseNum[1])
 78:     return release
 79: 
 80: # OSカーネルのバージョンで，eBPFの対応レベルを判定する関数
 81: def ebpfLevel():
 82:     num = kernelVersion()
 83:     if  num >= 5.5 :
 84:         return 2
 85:     if  num >= 5.4 :
 86:         return 1
 87:     else:
 88:         return 0
 89: 
 90: # OSカーネルのバージョンで，5.5以降で利用可能な機能を有効にするか否かを切り替え
 91: level = ebpfLevel()
 92: if level >= 2 :
 93:     bpf_text= header + bpf_text
 94: 
 95: # eBPFのプログラム(文字列)をロードさせる
 96: b = BPF(text=bpf_text)
 97: 
 98: # eBPFのVMをexecveのkprobeに割付け
 99: execve_fnname = b.get_syscall_fnname("execve")
100: b.attach_kprobe(event=execve_fnname, fn_name="syscall__execve")
101: 
102: # header
103: print("%-6s %-12s %s" % ("PID", "COMM", "OUTPUT"))
104: 
105: # eBPFからの出力(bpf_trace_printk())を受信してプリントアウトするループ
106: while 1:
107:         # Read messages from kernel pipe
108:         try:
109:             (task, pid, cpu, flags, ts, msg) = b.trace_fields()
110:         except ValueError:
111:             # Ignore messages from other tracers
112:             continue
113:         except KeyboardInterrupt: # Ctrl-Cでループを抜ける
114:             exit()
115: 
116:         printb(b"%-6d %-12.12s %s" % (pid, task, msg))
