#!/usr/bin/python3
# -*- coding: utf-8 -*-

from bcc import BPF, USDT
from bcc.utils import printb
import sys

# eBPFプログラム本体
bpf_text="""
#include <uapi/linux/ptrace.h>
int do_trace(struct pt_regs *ctx) {
    uint32_t counter;
    uint64_t addr;
    bpf_usdt_readarg(1, ctx, &counter);
    bpf_usdt_readarg(2, ctx, &addr);
    bpf_trace_printk("counter:%d  text:%s\\n", counter, addr);
    return 0;
};
"""

# 引数の確認
if len(sys.argv) < 2:
    print("USAGE: probe-sample PID")
    exit()
pid = sys.argv[1]
debug = 0

# USDTの指定ポイントにeBPFプログラムを割り付け
u = USDT(pid=int(pid))
u.enable_probe(probe="test-probe", fn_name="do_trace")
if debug:
    print(u.get_text())
    print(bpf_text)

b = BPF(text=bpf_text, usdt_contexts=[u])

# eBPFからの出力を受けてoutputするループ
while 1:
    try:
        (task, pid, cpu, flags, ts, msg) = b.trace_fields()
    except ValueError:
        print("value error")
        continue
    except KeyboardInterrupt:
        exit()
    printb(b"%-18.9f %-16s %-6d %s" % (ts, task, pid, msg))



